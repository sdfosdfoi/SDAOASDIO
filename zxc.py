import asyncio
import random
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = "8356139072:AAFhiu7mSCb431Ewa8-vnwIPVsLW9l46TyA"

logging.basicConfig(level=logging.INFO)

MESSAGES = [
    "–õ–∞–±—É–±—É –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è üêæüç≤",
    "–õ–∞–±—É–±—É —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å üéÆüê∂",
    "–õ–∞–±—É–±—É —Å–∫—É—á–∞–µ—Ç üòø",
    "–õ–∞–±—É–±—É –∑–∞–≥—Ä—É—Å—Ç–∏–ª üíî",
    "–õ–∞–±—É–±—É –∂–¥—ë—Ç —Ç–µ–±—è üêï‚ú®",
    "–õ–∞–±—É–±—É —Ö–æ—á–µ—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ ü§ó"
]

chat_ids = set()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: "Update", context: "ContextTypes.DEFAULT_TYPE"):
    chat_ids.add(update.effective_chat.id)
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üê∂‚ú®\n\n"
        "–Ø ‚Äî –±–æ—Ç –õ–∞–±—É–±—É üíñ\n"
        "–ë—É–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å, –ø–æ–∫–æ—Ä–º–∏—Ç—å "
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—è—Ç—å –õ–∞–±—É–±—É üêæüíû\n\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É üéÆ –∏ –∑–∞—Ö–æ–¥–∏ –≤ –∏–≥—Ä—É!"
    )
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", url="https://labubub-4mj5.vercel.app")]]
    )
    await update.message.reply_text(greeting, reply_markup=keyboard)

# –û—Ç–ø–∏—Å–∫–∞
async def stop(update: "Update", context: "ContextTypes.DEFAULT_TYPE"):
    chat_ids.discard(update.effective_chat.id)
    await update.message.reply_text("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –õ–∞–±—É–±—É.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
async def notifier(bot):
    while True:
        if chat_ids:
            msg = random.choice(MESSAGES)
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", url="https://labubub-4mj5.vercel.app")]]
            )
            for chat_id in chat_ids.copy():
                try:
                    await bot.send_message(chat_id, msg, reply_markup=keyboard)
                except Exception as e:
                    logging.error(e)
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(notifier(app.bot))

    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
