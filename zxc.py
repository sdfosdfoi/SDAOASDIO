import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import time
import random
import threading
import logging
from flask import Flask, request
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '8356139072:AAFhiu7mSCb431Ewa8-vnwIPVsLW9l46TyA'
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
app = Flask(__name__)

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –¥–æ 2 —Å–ª–æ–≤)
messages = [
    "–õ–∞–±—É–±—É –≥–æ–ª–æ–¥–µ–Ω!",
    "–•–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å!",
    "–ï–º—É –≥—Ä—É—Å—Ç–Ω–æ...",
    "–ù—É–∂–µ–Ω –∫–æ—Ä–º!",
    "–°–∫—É—á–∞–µ—Ç –ø–æ —Ç–µ–±–µ!",
    "–£—Å—Ç–∞–ª –∏–≥—Ä–∞—Ç—å.",
    "–•–æ—á–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!",
    "–ì—Ä—É—Å—Ç–∏—Ç –æ–¥–∏–Ω...",
    "–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!",
    "–ù—É–∂–µ–Ω –æ—Ç–¥—ã—Ö."
]

user_threads = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def create_play_button():
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Web App")
    markup = InlineKeyboardMarkup()
    play_button = InlineKeyboardButton(
        text="–ò–≥—Ä–∞—Ç—å!",
        web_app=WebAppInfo(url="https://labubub-4mj5.vercel.app")
    )
    markup.add(play_button)
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –õ–∞–±—É–±—É, —Ç–≤–æ–π –º–∏–ª—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü! üêæ\n"
        "–í –∏–≥—Ä–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ–±–æ –º–Ω–µ, –∫–æ—Ä–º–∏—Ç—å, –∏–≥—Ä–∞—Ç—å –∏ –¥–µ–ª–∞—Ç—å –º–µ–Ω—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ! "
        "–û—Ç–∫—Ä—ã–≤–∞–π —Å—É–Ω–¥—É–∫–∏, —á—Ç–æ–±—ã –≤—ã–±–∏—Ç—å —Ä–µ–¥–∫–∏—Ö –õ–∞–±—É–±—É, –ø–æ–≤—ã—à–∞–π –º–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∞–Ω—å —Å–∞–º—ã–º –∫—Ä—É—Ç—ã–º –≤ —à–∫–æ–ª–µ! üèÜ "
        "–°–æ–±–∏—Ä–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–∫–∞–∂–∏ –≤—Å–µ–º, –∫—Ç–æ –∑–¥–µ—Å—å –±–æ—Å—Å! "
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –∫–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –≤–Ω–∏–º–∞–Ω–∏–µ. üòä –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?"
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
    bot.reply_to(message, welcome_text, reply_markup=create_play_button())
    
    # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if chat_id not in user_threads:
        def send_notifications():
            while True:
                time.sleep(1800)  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                notification = random.choice(messages)
                try:
                    bot.send_message(chat_id, notification)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}: {notification}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
        
        thread = threading.Thread(target=send_notifications, daemon=True)
        thread.start()
        user_threads[chat_id] = thread
        logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
@app.route('/' + TOKEN, methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.get_json())
    if update:
        bot.process_new_updates([update])
    return '', 200

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
@app.route('/')
def index():
    return 'Bot is running!'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
def setup_webhook():
    try:
        bot.remove_webhook()
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ webhook
        webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
        bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# –ó–∞–ø—É—Å–∫ Flask –∏ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    setup_webhook()
    port = int(os.getenv('PORT', 5000))  # Render –∑–∞–¥–∞—ë—Ç PORT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5000
    app.run(host='0.0.0.0', port=port, debug=False)